// Generated by view binder compiler. Do not edit!
package com.example.EpicDoodles.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.EpicDoodles.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class InventoryUpdatePopupBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button btnWUpdate;

  @NonNull
  public final EditText txtWDescription;

  @NonNull
  public final EditText txtWImageUrl;

  @NonNull
  public final EditText txtWName;

  @NonNull
  public final EditText txtWPrice;

  @NonNull
  public final EditText txtWType;

  private InventoryUpdatePopupBinding(@NonNull LinearLayout rootView, @NonNull Button btnWUpdate,
      @NonNull EditText txtWDescription, @NonNull EditText txtWImageUrl, @NonNull EditText txtWName,
      @NonNull EditText txtWPrice, @NonNull EditText txtWType) {
    this.rootView = rootView;
    this.btnWUpdate = btnWUpdate;
    this.txtWDescription = txtWDescription;
    this.txtWImageUrl = txtWImageUrl;
    this.txtWName = txtWName;
    this.txtWPrice = txtWPrice;
    this.txtWType = txtWType;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static InventoryUpdatePopupBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static InventoryUpdatePopupBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.inventory_update_popup, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static InventoryUpdatePopupBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnWUpdate;
      Button btnWUpdate = ViewBindings.findChildViewById(rootView, id);
      if (btnWUpdate == null) {
        break missingId;
      }

      id = R.id.txtWDescription;
      EditText txtWDescription = ViewBindings.findChildViewById(rootView, id);
      if (txtWDescription == null) {
        break missingId;
      }

      id = R.id.txtWImageUrl;
      EditText txtWImageUrl = ViewBindings.findChildViewById(rootView, id);
      if (txtWImageUrl == null) {
        break missingId;
      }

      id = R.id.txtWName;
      EditText txtWName = ViewBindings.findChildViewById(rootView, id);
      if (txtWName == null) {
        break missingId;
      }

      id = R.id.txtWPrice;
      EditText txtWPrice = ViewBindings.findChildViewById(rootView, id);
      if (txtWPrice == null) {
        break missingId;
      }

      id = R.id.txtWType;
      EditText txtWType = ViewBindings.findChildViewById(rootView, id);
      if (txtWType == null) {
        break missingId;
      }

      return new InventoryUpdatePopupBinding((LinearLayout) rootView, btnWUpdate, txtWDescription,
          txtWImageUrl, txtWName, txtWPrice, txtWType);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
